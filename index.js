// Generated by CoffeeScript 1.7.0
(function() {
  var APDialog, APPlugin, ModalDialog, createSelector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ModalDialog = require('voxel-modal-dialog');

  createSelector = require('artpacks-ui');

  module.exports = function(game, opts) {
    return new APPlugin(game, opts);
  };

  module.exports.pluginInfo = {
    clientOnly: true,
    loadAfter: ['voxel-keys']
  };

  APPlugin = (function() {
    function APPlugin(game, opts) {
      var bindKey, _ref, _ref1, _ref2;
      this.game = game;
            if ((_ref = this.getArtpacks()) != null) {
        _ref;
      } else {
        throw new Error('voxel-artpacks requires game.materials as voxel-texture-shader, or voxel-stitch');
      };
      this.keys = (function() {
        if ((_ref1 = this.game.plugins.get('voxel-keys')) != null) {
          return _ref1;
        } else {
          throw new Error('voxel-artpacks requires voxel-keys plugin');
        }
      }).call(this);
      bindKey = (_ref2 = opts.bindKey) != null ? _ref2 : (this.game.shell ? 'P' : false);
      if (bindKey) {
        this.game.shell.bind('packs', bindKey);
      }
      this.dialog = new APDialog(this, this.game);
      this.enable();
    }

    APPlugin.prototype.enable = function() {
      return this.keys.down.on('packs', this.onDown = this.dialog.open.bind(this.dialog));
    };

    APPlugin.prototype.disable = function() {
      if (this.onDown != null) {
        return this.keys.down.removeListener('packs', this.onDown);
      }
    };

    APPlugin.prototype.getArtpacks = function() {
      var _ref, _ref1, _ref2, _ref3;
      return (_ref = (_ref1 = this.game.materials) != null ? _ref1.artPacks : void 0) != null ? _ref : (_ref2 = this.game.plugins) != null ? (_ref3 = _ref2.get('voxel-stitch')) != null ? _ref3.artpacks : void 0 : void 0;
    };

    return APPlugin;

  })();

  APDialog = (function(_super) {
    __extends(APDialog, _super);

    function APDialog(plugin, game) {
      var contents, refreshButton, selector;
      this.plugin = plugin;
      this.game = game;
      contents = [];
      contents.push(document.createTextNode('Drag packs below to change priority, or drop a .zip to load new pack:'));
      selector = createSelector(this.plugin.getArtpacks());
      selector.container.style.margin = '5px';
      contents.push(selector.container);
      refreshButton = document.createElement('button');
      refreshButton.textContent = 'Preview';
      refreshButton.style.width = '100%';
      refreshButton.addEventListener('click', (function(_this) {
        return function(ev) {
          var i, old_names, stitcher;
          stitcher = _this.game.plugins.get('voxel-stitch');
          if (stitcher != null) {
            refreshButton["true"] = false;
            stitcher.on('addedAll', function() {
              return refreshButton.disabled = false;
            });
            return stitcher.stitch();
          } else {
            old_names = _this.game.materials.names;
            _this.game.texture_opts.game = self.game;
            i = 0;
            _this.game.materials = _this.game.texture_modules[i](_this.game.texture_opts);
            _this.game.materials.load(old_names);
            return _this.game.showAllChunks();
          }
        };
      })(this));
      contents.push(refreshButton);
      APDialog.__super__.constructor.call(this, game, {
        contents: contents,
        escapeKeys: [192, 80]
      });
    }

    return APDialog;

  })(ModalDialog);

}).call(this);
